#define removePackage(name str)
#define removeDpendency(name str)
#define removeSysLibs(path str) 

getNameFromURL(p str) str {
    nbSlash = 0
    i=<int>len(p)-1; for i >= 0 {
        if p[i] == '/' {
            nbSlash++
        }
        if nbSlash == 2 {
            break
        }
        i--
    }
    np = string(p)
    np.trimLeft(i+1)
    if np.hasSuffix(".git") {
        np.trimRight(4)
    }

    return np.str()
}

getAuthorFromName(p str) str {
    i=<int>len(p)-1; for i >= 0 {
        if p[i] == '/' {
            break
        }
        i--
    }
    np = string(p)
    np.trimRight(len(p) - i)

    return np.str()
}

getVer() float {
    cmd = command("bah -v")
    ver = arrToStr(cmd.runBytes())

    ver = ver[23:len(ver)-22]

    version = splitStringBefore(string(ver), " ")
    build = ver
    i=<int>len(ver)-1; for i >= 0, i-- {
        if isNumber(ver[i]) == false {
            build = build[i+1:]
            break
        }
    }

    return strToFloat(version+build)
}

getGitURL() str {
    cmd = command("git config --get remote.origin.url")
    r = cmd.runBytes()
    if cmd.status != 0 || len(r) == 0 {
        println("Cannot wrap package that is not in a git repository.\nMake sure that you add the remote origin before wrapping the package.")
        return ""
    }
    s = string(arrToStr(r))
    s.trimRight(1)
    if s.hasSuffix(".git") {
        s.trimRight(4)
    }
    return s.str()
}

wrapPackage() {
    //initiating a new package
    p = new package
    p.url = getGitURL()

    if len(p.url) == 0 {
        return
    }

    p.bpmver = BPM_VERSION

    p.name = getNameFromURL(p.url)
    p.ver = getVer()
    
    an = analyser{}
    an.fromPackage(p, getCurrentPath())

    //writting the wrapped package
    fs = fileStream{}
    fs.open("./bpm.mod", "w")
    fs.writeFile(toJson(p))
    fs.close()
    println("Done!")
}

findUrl(sources []str, name str) str {

    i=0; for i < len(sources) {
        url = sources[i]+"/"+name
        cmd = command("git ls-remote "+url)
        cmd.runBytes()
        if cmd.status == 0 {
            return url
        }
        i++
    }

    println("Cannot find package '"+name+"'.\nPlease check '"+BPM_DIR+"/sources.json'.")
    return ""

}

isInstalled(name str) bool {
    installed = false
    DB = db{}
    DB.open(BPM_DIR + "/db.db")

    resp = DB.exec("SELECT * FROM packages WHERE name = '"+name+"'")
    p = new package
    resp.scan(p)
    if p != null && <ptr>p.name != null {
        installed = true
    }
    DB.close()
    return installed
}

#define installPackage(name str)

installPackageFromURL(url str) {
    name = getNameFromURL(url)
    src = string(url)
    src.trimRight(len(name)+1)
    found = false
    i=0; for i < len(sources) {
        if sources[i] == src.str() {
            found = false
            break
        }
        i++
    }

    if found == false {
        resp = ""
        for resp != "Y" && resp != "n" {
            print("Package '"+name+"' comes from the source '"+src.str()+"'. Should you add it? [Y/n] ")
            resp = stdinput()
            if resp == "Y" {
                print("Adding '"+src.str()+"'...")
                sources[len(sources)] = src.str()
                fs = fileStream{}
                fs.open(BPM_DIR + "/sources.json", "w")
                fs.writeFile(toJson(sources))
                fs.close()
                println("ok")
            } else if resp == "n" {
                return
            }
        }
    }
    installPackage(name)
}

copyFile(file str, dir str) bool {
    println("Copying file: "+file+" to "+dir)

    s = "cp \""+file+"\" \""+dir+"\""

    #windows {
        s = "xcopy /S /Q /Y /F \""+file+"\" \""+dir+"\""
    }

    cmd = command(s)

    cmd.runBytes()
    #linux {
        if cmd.status != 0 {
            cmd = command("sudo " + s)
            cmd.runBytes()
        }
    }

    return cmd.status == 0
}

deleteFile(file str) bool {
    println("Deleting file: "+file)
    #windows {
        return removeFile(file)
    }

    s = "yes | rm \""+file+"\""

    cmd = command(s)

    cmd.runBytes()
    #linux {
        if cmd.status != 0 {
            cmd = command("sudo rm \""+file+"\"")
            res = cmd.runBytes()
        }
    }

    return cmd.status == 0
}

registerPackage(p package*) {
    print("Updating database... ")

    DB = db{}
    DB.open(BPM_DIR + "/db.db")

    resp = DB.exec("INSERT INTO packages VALUES('"+p.name+"', '"+p.url+"', "+floatToStr(p.ver)+")")
    resp.panic()
    
    println("ok")

    println("Checking dependecies...")
    i=0; for i < len(p.deps), i++ {
        if p.deps[i] == "" {
            continue
        }
        installPackage(p.deps[i])
        resp = DB.exec("INSERT INTO deps (parent, pkg) VALUES('"+p.name+"', '"+p.deps[i]+"')")
        resp.panic()
    }

    println("Checking system libraries...")
    i=0; for i < len(p.syslibs), i++ {
        if p.syslibs[i] == "" {
            continue
        }
        copyFile(BAH_DIR+"/"+p.name+"/"+p.syslibs[i], BAH_DIR + "/" + dirFromFile(p.syslibs[i]))
        resp = DB.exec("INSERT INTO syslibs (parent, path) VALUES('"+p.name+"', '"+p.syslibs[i]+"')")
        resp.panic()
    }

    DB.close()

}

removePackageFiles(name str) {
    setCurrentPath(BAH_DIR)
    cmd = command("yes | rm -r "+name)
    cmd.runBytes()
}

updatePackage(p package*) {
    println("Updating '"+p.name+"'.")
    setCurrentPath(BAH_DIR+"/"+p.name)
    cmd = command("git pull origin main")
    cmd.runBytes()

    if cmd.status != 0 {
        println("Error updating...")
        println("There might be changes inside the local version of the package that might be discarded if updated.")
        resp = ""
        for resp != "Y" && resp != "n" {
            print("Do you want to force the pachage's update? [Y/n]")
            resp = stdinput()
            if resp == "Y" {
                cmd = command("git reset --hard origin")
                cmd.runBytes()

                if cmd.status != 0 {
                    println("Could not force package update. Try resinstalling it.")
                    return
                }
            } else if resp == "n" {
                return
            }
        }
    }

    fs = fileStream{}
    fs.open("./bpm.mod", "r")
    root = parseJson(fs.readContent())
    fs.close()
    np = new package
    root.scan(np)

    if np.bpmver > BPM_VERSION {
        println("ERROR: This package was wrapped with a newer version of BPM. Please update BPM before proceeding.")
        return
    }

    if np.ver > getVer() {
        println("Warning: This package was wrapped with a newer version of the Bah compiler.")
    }

    nDeps = []str
    nSysLibs = []str

    let depsJson = root.get("deps") then {
        depsJson.scan(nDeps)
    }
    
    let sysLibsJson = root.get("syslibs") then {
        sysLibsJson.scan(nSysLibs)
    }

    DB = db{}
    DB.open(BPM_DIR + "/db.db")
    
    println("Checking system libraries...")

    i=0; for i < len(nSysLibs), i++ {
        if nSysLibs[i] == "" || nSysLibs[i] in p.syslibs {
            continue
        }
        copyFile("./"+nSysLibs[i], BAH_DIR + "/" + dirFromFile(nSysLibs[i]))
        resp = DB.exec("INSERT INTO syslibs (parent, path) VALUES('"+p.name+"', '"+nSysLibs[i]+"')")
        resp.panic()
    }

    println("Checking dependecies...")
    i=0; for i < len(nDeps), i++ {
        if nDeps[i] == "" {
            continue
        }
        installPackage(nDeps[i])
        if nDeps[i] in p.deps == false {
            resp = DB.exec("INSERT INTO deps (parent, pkg) VALUES('"+p.name+"', '"+nDeps[i]+"')")
            resp.panic()
        }
    }

    i=0; for i < len(p.syslibs), i++ {
        if p.syslibs[i] in nSysLibs == false {
            resp = DB.exec("DELETE FROM syslibs WHERE parent='"+p.name+"' AND path='"+p.syslibs[i]+"'")
            resp.panic()
            removeSysLibs(p.syslibs[i])
        }
    }

    DB.close()

    i=0; for i < len(p.deps), i++ {
        if p.deps[i] in nDeps == false {
            resp = DB.exec("DELETE FROM deps WHERE parent='"+p.name+"' AND pkg='"+p.deps[i]+"'")
            resp.panic()
            removeDpendency(p.deps[i])
        }
    }

    println("Done updating '"+p.name+"'.\n")
}

installPackage(name str) {
    url = findUrl(sources, name)

    if len(url) == 0 {
        return
    }

    dir = getAuthorFromName(name)
    setCurrentPath(BAH_DIR)

    if isInstalled(name) {
        DB = db{}
        DB.open(BPM_DIR + "/db.db")
        resp = DB.exec("SELECT * FROM packages WHERE name = '"+name+"'")
        resp.panic()
        p = new package
        resp.scan(p)

        resp = DB.exec("SELECT pkg FROM deps WHERE parent = '"+name+"'")
        resp.panic()
        resp.scan(p.deps)

        resp = DB.exec("SELECT path FROM syslibs WHERE parent = '"+name+"'")
        resp.panic()
        resp.scan(p.syslibs)

        DB.close()
        updatePackage(p)
        return
    }
    println("Installing '"+name+"'.")
    mkdir(dir, 0700)
    setCurrentPath(dir)

    print("Clonning repository... ")

    cmd = command("git clone "+url+"")
    cmd.runBytes()

    setCurrentPath("../"+name)

    files = listFiles(".")

    println("ok")

    if "bpm.mod" in files == false {
        removePackageFiles(name)
        println("No BPM package found. Aborting.")
        return
    }

    p = new package
    fs = fileStream{}
    fs.open("./bpm.mod", "r")
    root = parseJson(fs.readContent())
    fs.close()
    root.scan(p)
    if p.url != url {
        println("WARNING: URL missmatch, this package could be stolen or compromised.")
    }

    if p.bpmver > BPM_VERSION {
        println("ERROR: This package was wrapped with a newer version of BPM. Please update BPM before proceeding.")
        return
    }

    if p.ver > getVer() {
        println("Warning: This package was wrapped with a newer version of the Bah compiler.")
    }

    i=0; for i < len(p.syslibs), i++ {
        if strHasPrefix(p.syslibs[i], SYS_LIBS_FOLDER[1:]) == false {
            println("Ignoring system library: "+p.syslibs[i])
        }
    }

    registerPackage(p)

}

removeDpendency(name str) {
    DB = db{}
    DB.open(BPM_DIR+"/db.db")

    resp = DB.exec("SELECT COUNT(*) FROM deps WHERE pkg = '"+name+"'")
    nb = 0
    resp.scan(&nb)

    if nb == 0 {
        removePackage(name)
    }

    DB.close()
}

removeSysLibs(path str) {
    DB = db{}
    DB.open(BPM_DIR+"/db.db")

    resp = DB.exec("SELECT COUNT(*) FROM syslibs WHERE path = '"+path+"'")
    nb = 0
    resp.scan(&nb)

    if nb == 0 {
        deleteFile(BAH_DIR+"/"+path)
    }

    DB.close()
}


removePackage(name str) {
    if isInstalled(name) == false {
        println("No package called '"+name+"' is installed.")
        return
    }

    DB = db{}
    DB.open(BPM_DIR+"/db.db")

    print("Removing package '"+name+"'... ")
    DB.exec("DELETE FROM packages WHERE name = '"+name+"'")
    removePackageFiles(name)
    println("ok")


    resp = DB.exec("SELECT pkg FROM deps WHERE parent = '"+name+"'")
    deps = []str
    resp.scan(deps)
    println("Removing dependencies. (found: "+uintToStr(len(deps))+")")
    DB.exec("DELETE FROM deps WHERE parent = '"+name+"'")
    i=0; for i < len(deps) {
        removeDpendency(deps[i])
        i++
    }

    resp = DB.exec("SELECT path FROM syslibs WHERE parent = '"+name+"'")
    syslibs = []str
    resp.scan(syslibs)
    println("Removing system libraries. (found: "+uintToStr(len(syslibs))+")")
    DB.exec("DELETE FROM syslibs WHERE parent = '"+name+"'")
    i=0; for i < len(syslibs), i++ {
        resp = DB.exec("DELETE FROM syslibs WHERE parent='"+name+"' AND path='"+syslibs[i]+"'")
        resp.panic()
        removeSysLibs(syslibs[i])
    }

    DB.close()

}
