BPM_DIR = ""
DB db

#define getenv(name char*) char*

genBPMdir() {
    #linux {
        BPM_DIR = cStrToBah(getenv("HOME")) + "/.bpm"
    }
    #windows {
        BPM_DIR = cStrToBah(getenv("HOMEPATH")) + "/.bpm"
    }
    #darwin {
        BPM_DIR = cStrToBah(getenv("HOME")) + "/.bpm"
    }
    makeDir(BPM_DIR, 0700)
}

dbGuard() {
    genBPMdir()
    if fileExists(BPM_DIR + "/db.db") == false {
        DB = db{}
        if DB.open(BPM_DIR + "/db.db") == false {
            panic("Errror creating BPM database.")
        }

        DB.exec("CREATE TABLE packages(
            name TEXT PRIMARY KEY NOT NULL,
            url TEXT NOT NULL,
            ver FLOAT NOT NULL
        )")

        DB.exec("CREATE TABLE deps(
            pkg TEXT PRIMARY KEY NOT NULL,
            parent TEXT NOT NULL
        )")

        DB.exec("CREATE TABLE syslibs(
            path TEXT PRIMARY KEY NOT NULL,
            parent TEXT NOT NULL
        )")


        DB.close()
        fs = fileStream{}
        fs.open(BPM_DIR + "/sources.json", "w")
        fs.writeFile("
        [
            \"https://github.com\"
        ]")
        fs.close()
    }
}

readSources() []str {
    print("Reading sources... ")
    fs = fileStream{}
    fs.open(BPM_DIR + "/sources.json", "r")
    if fs.isValid() == 0 {
        panic("Cannot read sources file, please make shure it exists and have the right permissions.")
    }
    srces = []str
    root = parseJson(fs.readContent())
    root.scan(srces)

    if len(srces) == 0 {
        panic("no sources found!\nAdd a source in '"+BPM_DIR+"/sources.json'")
    }

    println("ok")
    fs.close()
    return srces
}

struct package {
    name: str
    url: str
    ver: float
    deps: []str
    syslibs: []str
    bpmver: float
}

struct dep {
    pkg: str
    parent: str
}