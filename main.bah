#import "iostream.bah"
#import "flags.bah"
#import "exec.bah"
#import "time.bah"
#import "sqlite3.bah"
#import "json.bah"
#import "path.bah"

const BPM_VERSION = 0.1

#linux {
    const BAH_DIR = "/opt/bah"
}
#darwin {
    const BAH_DIR = "/opt/bah"
}
#darwin {
    const BAH_DIR = "C:/Bah"
}

flags flags
sources = []str

#include "src/db.bah"
#include "src/lexer.bah"
#include "src/analyser.bah"
#include "src/package.bah"
#include "src/patches.bah"


main(args []str) int {
    flags = flags{}
    flags.addBool("wrap", "To wrap a package.")
    flags.addBool("list", "To list all packages.")
    flags.addString("install", "To install a package.")
    flags.addBool("update", "To update all packages.")
    flags.addString("remove", "To remove a package.")
    flags.addString("deps", "To list all dependecies of a package.")
    flags.parse(args)
    
    dbGuard()
    sources = readSources()

    //Wrapping a package.
    if flags.isSet("wrap") {
        wrapPackage()
    } else if flags.isSet("install") {
        arg = flags.get("install")
        if arg == "itself" {
            
            parts = splitString(string(args[0]), " ")
            name = parts[0]

            #linux {
                cmd = command("sudo cp "+name.str()+" /bin/bpm & chmod +x /bin/bpm")
                cmd.runBytes()
                if fileExists("/bin/bpm") == false {
                    println("Could not add to path.")
                }
            }
            #darwin {
                cmd = command("cp "+name.str()+" "+BPM_DIR+"/bpm & chmod +x "+BPM_DIR+"/bpm")
                cmd.runBytes()
                cmd = command("export PATH=\""+BPM_DIR+":$PATH\"")
                cmd.runBytes()
                if cmd.status != 0 {
                    println("Could not add to path.")
                }
            }
            #windows {
                cmd = command("xcopy /S /Q /Y /F "+name.str()+" "+BPM_DIR+"/bpm.exe")
                cmd.runBytes()
                cmd = command("xcopy /S /Q /Y /F "+name.str()+" C:/WINDOWS/bpm.exe")
                cmd.runBytes()
            }

            applyPatches()
        } else {
            installPackage(arg)
        }
    } else if flags.isSet("remove") {
        removePackage(flags.get("remove"))
    } else if flags.isSet("list") {
        DB = db{}
        DB.open(BPM_DIR+"/db.db")
        resp = DB.exec("SELECT * FROM packages")
        packages = []package*
        resp.scan(packages)
        i=0; for i < len(packages) {
            p = packages[i]
            println("-> "+p.name+" \t"+p.url)
            i++
        }
        DB.close()
    } else if flags.isSet("deps") {
        name = flags.get("deps")
        if isInstalled(name) == false {
            println("No package called '"+name+"' is installed.")
            return 1
        }
        DB = db{}
        DB.open(BPM_DIR+"/db.db")
        resp = DB.exec("SELECT parent FROM deps WHERE pkg = '"+name+"'")
        deps = []str
        resp.scan(deps)
        i=0; for i < len(deps) {
            p = new package
            resp = DB.exec("SELECT * FROM packages WHERE name = '"+deps[i]+"'")
            resp.scan(p)
            println("-> "+p.name+" ("+p.url+")")
            i++
        }
        DB.close()
    } else if flags.isSet("update") {
        DB = db{}
        DB.open(BPM_DIR+"/db.db")
        resp = DB.exec("SELECT * FROM packages")
        packages = []package*
        resp.scan(packages)
        DB.close()
        i=0; for i < len(packages), i++ {
            updatePackage(packages[i])
        }
    }

    println("Bye!")

    return 0
}