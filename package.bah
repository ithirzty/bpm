#define removePackage(name str)
#define removeDpendency(name str)

getNameFromURL(p str) str {
    nbSlash = 0
    i=<int>len(p)-1; for i >= 0 {
        if p[i] == '/' {
            nbSlash++
        }
        if nbSlash == 2 {
            break
        }
        i--
    }
    np = string(p)
    np.trimLeft(i+1)
    if np.hasSuffix(".git") {
        np.trimRight(4)
    }

    return np.str()
}

getAuthorFromName(p str) str {
    i=<int>len(p)-1; for i >= 0 {
        if p[i] == '/' {
            break
        }
        i--
    }
    np = string(p)
    np.trimRight(len(p) - i)

    return np.str()
}

getVer() float {
    cmd = command("bah -v")
    ver = string(arrToStr(cmd.runBytes()))
    ver.trimLeft(23)
    ver.trimRight(24)

    parts = splitString(ver, " (build ")

    ver = parts[0]
    build = parts[1]

    return strToFloat(ver.str() + build.str())

}

getGitURL() str {
    cmd = command("git config --get remote.origin.url")
    r = cmd.runBytes()
    if cmd.status != 0 || len(r) == 0 {
        panic("Cannot wrap package that is not in a git repository.\nMake sure that you add the remote origin before wrapping the package.")
    }
    s = string(arrToStr(r))
    s.trimRight(1)
    if s.hasSuffix(".git") {
        s.trimRight(4)
    }
    return s.str()
}

wrapPackage() {
    //initiating a new package
    p = new package
    p.url = getGitURL()
    p.name = getNameFromURL(p.url)
    p.ver = getVer()
    
    an = analyser{}
    an.fromPackage(p, getCurrentPath())

    //writting the wrapped package
    fs = fileStream{}
    fs.open("./bpm.mod", "w")
    fs.writeFile(toJson(p))
    fs.close()
    println("Done!")
}

findUrl(sources []str, name str) str {

    i=0; for i < len(sources) {
        url = sources[i]+"/"+name
        cmd = command("git ls-remote "+url)
        cmd.runBytes()
        if cmd.status == 0 {
            return url
        }
        i++
    }

    panic("Cannot find package '"+name+"'.\nPlease check '"+BPM_DIR+"/sources.json'.")
    return ""

}

isInstalled(name str) bool {
    installed = false
    DB = db{}
    DB.open(BPM_DIR + "/db.db")

    resp = DB.exec("SELECT * FROM packages WHERE name = '"+name+"'")
    p = new package
    resp.scan(p)
    if p != null && <ptr>p.name != null {
        installed = true
    }
    DB.close()
    return installed
}

#define installPackage(name str)

installPackageFromURL(url str) {
    name = getNameFromURL(url)
    src = string(url)
    src.trimRight(len(name)+1)
    found = false
    i=0; for i < len(sources) {
        if sources[i] == src.str() {
            found = false
            break
        }
        i++
    }

    if found == false {
        resp = ""
        for resp != "Y" && resp != "n" {
            print("Package '"+name+"' comes from the source '"+src.str()+"'. Should you add it? [Y/n] ")
            resp = stdinput()
            if resp == "Y" {
                print("Adding '"+src.str()+"'...")
                sources[len(sources)] = src.str()
                fs = fileStream{}
                fs.open(BPM_DIR + "/sources.json", "w")
                fs.writeFile(toJson(sources))
                fs.close()
                println("ok")
            } else if resp == "n" {
                return
            }
        }
    }
    installPackage(name)
}
registerPackage(p package*) {
    print("Updating database... ")

    DB = db{}
    DB.open(BPM_DIR + "/db.db")

    resp = DB.exec("INSERT INTO packages VALUES('"+p.name+"', '"+p.url+"', "+floatToStr(p.ver)+")")
    resp.panic()
    
    println("ok")

    println("Checking dependecies...")
    i=0; for i < len(p.deps), i++ {
        if p.deps[i] == "" {
            continue
        }
        installPackage(p.deps[i])
        resp = DB.exec("INSERT INTO deps (parent, pkg) VALUES('"+p.name+"', '"+p.deps[i]+"')")
        resp.panic()
    }

    DB.close()

}

removePackageFiles(name str) {
    setCurrentPath(BAH_DIR)
    cmd = command("yes | rm -r "+name)
    cmd.runBytes()
}

updatePackage(p package*) {
    println("Updating '"+p.name+"'.")
    setCurrentPath(BAH_DIR+"/"+p.name)
    cmd = command("git pull origin main")
    cmd.runBytes()

    if cmd.status != 0 {
        println("Error updating...")
        println("There might be changes inside the local version of the package that might be discarded if updated.")
        resp = ""
        for resp != "Y" && resp != "n" {
            print("Do you want to force the pachage's update? [Y/n]")
            resp = stdinput()
            if resp == "Y" {
                cmd = command("git reset --hard origin")
                cmd.runBytes()

                if cmd.status != 0 {
                    println("Could not force package update. Try resinstalling it.")
                    return
                }
            } else if resp == "n" {
                return
            }
        }
    }

    fs = fileStream{}
    fs.open("./bpm.mod", "r")
    root = parseJson(fs.readContent())
    fs.close()

    nDeps = []str
    root.get("deps").scan(nDeps)

    DB = db{}
    DB.open(BPM_DIR + "/db.db")
    println("Checking dependecies...")

    i=0; for i < len(nDeps), i++ {
        if nDeps[i] == "" {
            continue
        }
        installPackage(nDeps[i])
        if nDeps[i] in p.deps == false {
            resp = DB.exec("INSERT INTO deps (parent, pkg) VALUES('"+p.name+"', '"+nDeps[i]+"')")
            resp.panic()
        }
    }
    DB.close()

    i=0; for i < len(p.deps), i++ {
        if p.deps[i] in nDeps == false {
            removeDpendency(p.deps[i])
        }
    }

    println("Done updating '"+p.name+"'.\n")
}

installPackage(name str) {
    url = findUrl(sources, name)

    dir = getAuthorFromName(name)
    setCurrentPath(BAH_DIR)

    if isInstalled(name) {
        DB = db{}
        DB.open(BPM_DIR + "/db.db")
        resp = DB.exec("SELECT * FROM packages WHERE name = '"+name+"'")
        p = new package
        resp.scan(p)
        DB.close()
        updatePackage(p)
        return
    }
    println("Installing '"+name+"'.")
    mkdir(dir, 0700)
    setCurrentPath(dir)

    print("Clonning repository... ")

    cmd = command("git clone "+url+"")
    cmd.runBytes()

    setCurrentPath("../"+name)

    files = listFiles(".")

    println("ok")

    if "bpm.mod" in files == false {
        removePackageFiles(name)
        panic("No BPM package found. Aborting.")
    }

    p = new package
    fs = fileStream{}
    fs.open("./bpm.mod", "r")
    root = parseJson(fs.readContent())
    fs.close()
    root.scan(p)
    if p.url != url {
        println("WARNING: URL missmatch, this package could be stolen or compromised.")
    }

    registerPackage(p)

}

removeDpendency(name str) {
    DB = db{}
    DB.open(BPM_DIR+"/db.db")

    resp = DB.exec("SELECT COUNT(*) FROM deps WHERE pkg = '"+name+"'")
    nb = 0
    resp.scan(&nb)

    if nb == 0 {
        removePackage(name)
    }

    DB.close()
}


removePackage(name str) {
    if isInstalled(name) == false {
        panic("No package called '"+name+"' is installed.")
    }


    DB = db{}
    DB.open(BPM_DIR+"/db.db")

    print("Removing package '"+name+"'... ")
    DB.exec("DELETE FROM packages WHERE name = '"+name+"'")
    removePackageFiles(name)
    println("ok")

    println("Removing dependencies.")
    resp = DB.exec("SELECT parent FROM deps WHERE pkg = '"+name+"'")
    deps = []str
    resp.scan(&deps)
    i=0; for i < len(deps) {
        removeDpendency(deps[i])
        i++
    }

    DB.close()

}
